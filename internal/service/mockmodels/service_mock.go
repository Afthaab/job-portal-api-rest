// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mockmodels/service_mock.go -package=mockmodels
//
// Package mockmodels is a generated GoMock package.
package mockmodels

import (
	context "context"
	reflect "reflect"

	models "github.com/afthaab/job-portal/internal/models"
	models0 "github.com/afthaab/job-portal/internal/models/requestModels"
	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// AddCompanyDetails mocks base method.
func (m *MockUserService) AddCompanyDetails(ctx context.Context, companyData models.Company) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCompanyDetails", ctx, companyData)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCompanyDetails indicates an expected call of AddCompanyDetails.
func (mr *MockUserServiceMockRecorder) AddCompanyDetails(ctx, companyData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCompanyDetails", reflect.TypeOf((*MockUserService)(nil).AddCompanyDetails), ctx, companyData)
}

// AddJobDetails mocks base method.
func (m *MockUserService) AddJobDetails(ctx context.Context, jobData models0.NewJobs, cid uint64) (models0.ResponseNewJobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddJobDetails", ctx, jobData, cid)
	ret0, _ := ret[0].(models0.ResponseNewJobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddJobDetails indicates an expected call of AddJobDetails.
func (mr *MockUserServiceMockRecorder) AddJobDetails(ctx, jobData, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJobDetails", reflect.TypeOf((*MockUserService)(nil).AddJobDetails), ctx, jobData, cid)
}

// ProccessApplication mocks base method.
func (m *MockUserService) ProccessApplication(ctx context.Context, applicationData []models0.NewUserApplication) ([]models0.NewUserApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProccessApplication", ctx, applicationData)
	ret0, _ := ret[0].([]models0.NewUserApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProccessApplication indicates an expected call of ProccessApplication.
func (mr *MockUserServiceMockRecorder) ProccessApplication(ctx, applicationData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProccessApplication", reflect.TypeOf((*MockUserService)(nil).ProccessApplication), ctx, applicationData)
}

// UserSignIn mocks base method.
func (m *MockUserService) UserSignIn(ctx context.Context, userData models.NewUser) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignIn", ctx, userData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignIn indicates an expected call of UserSignIn.
func (mr *MockUserServiceMockRecorder) UserSignIn(ctx, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignIn", reflect.TypeOf((*MockUserService)(nil).UserSignIn), ctx, userData)
}

// UserSignup mocks base method.
func (m *MockUserService) UserSignup(ctx context.Context, userData models.NewUser) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignup", ctx, userData)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignup indicates an expected call of UserSignup.
func (mr *MockUserServiceMockRecorder) UserSignup(ctx, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignup", reflect.TypeOf((*MockUserService)(nil).UserSignup), ctx, userData)
}

// ViewAllCompanies mocks base method.
func (m *MockUserService) ViewAllCompanies(ctx context.Context) ([]models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllCompanies", ctx)
	ret0, _ := ret[0].([]models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllCompanies indicates an expected call of ViewAllCompanies.
func (mr *MockUserServiceMockRecorder) ViewAllCompanies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllCompanies", reflect.TypeOf((*MockUserService)(nil).ViewAllCompanies), ctx)
}

// ViewAllJobs mocks base method.
func (m *MockUserService) ViewAllJobs(ctx context.Context) ([]models.Jobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllJobs", ctx)
	ret0, _ := ret[0].([]models.Jobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllJobs indicates an expected call of ViewAllJobs.
func (mr *MockUserServiceMockRecorder) ViewAllJobs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllJobs", reflect.TypeOf((*MockUserService)(nil).ViewAllJobs), ctx)
}

// ViewCompanyDetails mocks base method.
func (m *MockUserService) ViewCompanyDetails(ctx context.Context, cid uint64) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewCompanyDetails", ctx, cid)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewCompanyDetails indicates an expected call of ViewCompanyDetails.
func (mr *MockUserServiceMockRecorder) ViewCompanyDetails(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewCompanyDetails", reflect.TypeOf((*MockUserService)(nil).ViewCompanyDetails), ctx, cid)
}

// ViewJob mocks base method.
func (m *MockUserService) ViewJob(ctx context.Context, cid uint64) ([]models.Jobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewJob", ctx, cid)
	ret0, _ := ret[0].([]models.Jobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewJob indicates an expected call of ViewJob.
func (mr *MockUserServiceMockRecorder) ViewJob(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewJob", reflect.TypeOf((*MockUserService)(nil).ViewJob), ctx, cid)
}

// ViewJobById mocks base method.
func (m *MockUserService) ViewJobById(ctx context.Context, jid uint64) (models.Jobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewJobById", ctx, jid)
	ret0, _ := ret[0].(models.Jobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewJobById indicates an expected call of ViewJobById.
func (mr *MockUserServiceMockRecorder) ViewJobById(ctx, jid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewJobById", reflect.TypeOf((*MockUserService)(nil).ViewJobById), ctx, jid)
}
